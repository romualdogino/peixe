
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  image: 'image',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin',
  permissions: 'permissions'
};

exports.Prisma.TanqueScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  codigo_interno: 'codigo_interno',
  volume_m3: 'volume_m3',
  area_m2: 'area_m2',
  tipo: 'tipo',
  tipo_material: 'tipo_material',
  status: 'status',
  localizacao: 'localizacao',
  data_instalacao: 'data_instalacao',
  nivel_agua_cm: 'nivel_agua_cm',
  isActive: 'isActive',
  ciclo_atual_id: 'ciclo_atual_id'
};

exports.Prisma.CicloProducaoScalarFieldEnum = {
  id: 'id',
  tanque_id: 'tanque_id',
  especie: 'especie',
  origem_lote: 'origem_lote',
  data_inicio: 'data_inicio',
  data_fim: 'data_fim',
  quantidade_inicial: 'quantidade_inicial',
  quantidade_atual: 'quantidade_atual',
  peso_inicial_g: 'peso_inicial_g',
  peso_atual: 'peso_atual',
  mortes: 'mortes',
  alimentacao_total_kg: 'alimentacao_total_kg',
  custo_total: 'custo_total',
  data_prevista_saida: 'data_prevista_saida',
  status: 'status',
  observacoes: 'observacoes'
};

exports.Prisma.RegistroDiarioScalarFieldEnum = {
  id: 'id',
  tanque_id: 'tanque_id',
  data: 'data',
  turno: 'turno',
  temperatura_agua: 'temperatura_agua',
  quantidade_kg: 'quantidade_kg',
  fracionamento: 'fracionamento',
  tipo_racao: 'tipo_racao',
  racao_marca: 'racao_marca',
  racao_codigo: 'racao_codigo',
  sobras: 'sobras',
  mortalidade: 'mortalidade',
  causa_morte: 'causa_morte',
  horas_aeracao: 'horas_aeracao',
  observacoes: 'observacoes',
  eventos_adversos: 'eventos_adversos',
  responsavel_id: 'responsavel_id',
  isAutomatic: 'isAutomatic'
};

exports.Prisma.BiometriaScalarFieldEnum = {
  id: 'id',
  tanque_id: 'tanque_id',
  data_amostra: 'data_amostra',
  idade_lote_dias: 'idade_lote_dias',
  tamanho_amostra: 'tamanho_amostra',
  peso_total_kg: 'peso_total_kg',
  peso_minimo: 'peso_minimo',
  peso_maximo: 'peso_maximo',
  comprimento_medio_cm: 'comprimento_medio_cm',
  comprimento_minimo: 'comprimento_minimo',
  comprimento_maximo: 'comprimento_maximo',
  altura_minima: 'altura_minima',
  altura_maxima: 'altura_maxima',
  desvio_padrao_peso: 'desvio_padrao_peso',
  desvio_padrao_comprimento: 'desvio_padrao_comprimento',
  observacoes: 'observacoes',
  recomendacoes: 'recomendacoes',
  responsavel_id: 'responsavel_id'
};

exports.Prisma.QualidadeAguaScalarFieldEnum = {
  id: 'id',
  tanque_id: 'tanque_id',
  data_analise: 'data_analise',
  hora_coleta: 'hora_coleta',
  fonte_agua: 'fonte_agua',
  metodo_coleta: 'metodo_coleta',
  oxigenio_dissolvido: 'oxigenio_dissolvido',
  ph: 'ph',
  amonia: 'amonia',
  nitrito: 'nitrito',
  nitrato: 'nitrato',
  tds: 'tds',
  orp: 'orp',
  ec: 'ec',
  salppm: 'salppm',
  sal: 'sal',
  sg: 'sg',
  temperatura: 'temperatura',
  transparencia_cm: 'transparencia_cm',
  notas: 'notas',
  responsavel_id: 'responsavel_id'
};

exports.Prisma.RegistroSaudeScalarFieldEnum = {
  id: 'id',
  tanque_id: 'tanque_id',
  data_registro: 'data_registro',
  sintomas: 'sintomas',
  percentual_afetado: 'percentual_afetado',
  diagnostico: 'diagnostico',
  patologia_codigo: 'patologia_codigo',
  produto: 'produto',
  dosagem: 'dosagem',
  dias_tratamento: 'dias_tratamento',
  dias_carencia: 'dias_carencia',
  resultado: 'resultado',
  data_diagnostico: 'data_diagnostico',
  usuario_id: 'usuario_id'
};

exports.Prisma.ProdutoEstoqueScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  categoria: 'categoria',
  tipo: 'tipo',
  unidade_medida: 'unidade_medida',
  peso_por_unidade: 'peso_por_unidade',
  quantidade_unidades: 'quantidade_unidades',
  estoque_atual_kg: 'estoque_atual_kg',
  lote_numero: 'lote_numero',
  validade: 'validade',
  fornecedor: 'fornecedor',
  custo_unitario: 'custo_unitario',
  data_ultima_entrada: 'data_ultima_entrada',
  data_ultima_saida: 'data_ultima_saida'
};

exports.Prisma.MovimentacaoTanqueScalarFieldEnum = {
  id: 'id',
  tanque_id: 'tanque_id',
  tipo_movimentacao: 'tipo_movimentacao',
  motivo: 'motivo',
  data: 'data',
  quantidade: 'quantidade',
  peso_medio_g: 'peso_medio_g',
  notas: 'notas',
  usuario_id: 'usuario_id'
};

exports.Prisma.MovimentacaoRacaoScalarFieldEnum = {
  id: 'id',
  produto_id: 'produto_id',
  tipo_movimento: 'tipo_movimento',
  data: 'data',
  quantidade_kg: 'quantidade_kg',
  lote_id: 'lote_id',
  observacoes: 'observacoes',
  responsavel_id: 'responsavel_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  OPERADOR: 'OPERADOR',
  VETERINARIO: 'VETERINARIO',
  GESTOR: 'GESTOR'
};

exports.TipoTanque = exports.$Enums.TipoTanque = {
  CIRCULAR: 'CIRCULAR',
  ESCAVADO: 'ESCAVADO',
  RACETRACK: 'RACETRACK',
  QUADRADO: 'QUADRADO'
};

exports.StatusTanque = exports.$Enums.StatusTanque = {
  ATIVO: 'ATIVO',
  MANUTENCAO: 'MANUTENCAO',
  VAZIO: 'VAZIO',
  INATIVO: 'INATIVO'
};

exports.Turno = exports.$Enums.Turno = {
  MANHA: 'MANHA',
  TARDE: 'TARDE',
  NOITE: 'NOITE'
};

exports.MovTanqueTipo = exports.$Enums.MovTanqueTipo = {
  ENTRADA_LOTE: 'ENTRADA_LOTE',
  SAIDA_VENDA: 'SAIDA_VENDA',
  TRANSFERENCIA_SAIDA: 'TRANSFERENCIA_SAIDA',
  TRANSFERENCIA_ENTRADA: 'TRANSFERENCIA_ENTRADA'
};

exports.Prisma.ModelName = {
  User: 'User',
  Tanque: 'Tanque',
  CicloProducao: 'CicloProducao',
  RegistroDiario: 'RegistroDiario',
  Biometria: 'Biometria',
  QualidadeAgua: 'QualidadeAgua',
  RegistroSaude: 'RegistroSaude',
  ProdutoEstoque: 'ProdutoEstoque',
  MovimentacaoTanque: 'MovimentacaoTanque',
  MovimentacaoRacao: 'MovimentacaoRacao'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
